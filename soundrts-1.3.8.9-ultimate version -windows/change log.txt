1.3.8.8:
Workers can now be assigned specific resource types to gather:
e.g. can_gather resource1 resource2
By default, workers cannot gather any resource types.
Supports can_gather all to gather all resource types.
Removed extraction_time and extraction_qty from deposits.
Added gather_time and gather_qty parameters to worker class.
Examples:
can_gather resource1 resource2 resource3 resource4 resource5
gather_time resource1 10 resource2 15 resource3 20 resource4 25 resource5 30 # Time(seconds) for each resource

Can also define individually:
gather_time_resource1 10
gather_time_resource2 15
gather_qty resource1 2 resource2 3 resource3 4 resource4 5 resource5 6 # Quantity per gathering

Or individual quantity definitions:
gather_qty_resource1 2
gather_qty_resource2 3

Supports global settings:
gather_time all 10 # Time for all resources
gather_qty all 2 # Quantity for all resources

Simplified syntax for single resource:
can_gather resource1
gather_time 20 # Implicitly applies to resource1
gather_qty 2 # Implicitly applies to resource1

All parameters can be modified through research.
Upgrade Examples
Example 1: Bonus-based gathering time reduction
def faster_gathering
class upgrade
cost 10 5
time_cost 60
effect bonus gather_time 1 # -1s per level (bonus style)
requirements lumbermill
end
Example 2: Set specific resource gathering time
def gold_gathering_expert
class upgrade
cost 15 5
time_cost 70
effect gather_time resource1 3 # Set gold gathering to 3s
requirements blacksmith
end
Example 3: Set specific resource quantity
def gold_yield_expert
class upgrade
cost 15 5
time_cost 70
effect gather_qty resource1 12 # Set gold quantity to 12
requirements blacksmith
end
Example 4: Global resource settings
def master_gatherer
class upgrade
cost 20 10
time_cost 80
effect gather_time all 2.5 # All resources take 2.5s
effect gather_qty all 15 # All resources yield 15
requirements castle
end
Example 5: Multi-resource configuration
def resource_specialist
class upgrade
cost 20 10
time_cost 80
effect gather_time resource1 2 resource2 3 # Gold 2s, Wood 3s
effect gather_qty resource1 10 resource2 12 # Gold 10, Wood 12
requirements castle
end
Example 6: Production time bonus
def faster_production
class upgrade
cost 15 8
time_cost 80
effect bonus production_time 30 # -30s per level
requirements lumbermill
end
Example 7: Set production time
def rapid_production
class upgrade
cost 15 8
time_cost 80
effect production_time 180 # Set to 180s
requirements lumbermill
end
Example 8: Production quantity bonus
def enhanced_production
class upgrade
cost 20 10
time_cost 90
effect bonus production_qty 10 # +10 per level
requirements lumbermill
end
Example 9: Set production quantity
def mass_production
class upgrade
cost 20 10
time_cost 90
effect production_qty 70 # Set to 70
requirements lumbermill
end
Example 10: Kill reward bonus
def better_spoils
class upgrade
cost 25 15
time_cost 100
effect bonus rewards_resource 10 5 # +10 Gold +5 Wood per level
requirements castle
end
Example 11: Set kill rewards
def war_profiteer
class upgrade
cost 25 15
time_cost 100
effect rewards_resource 80 20 # Set to 80 Gold 20 Wood
requirements castle


1.3.8.5:
Implemented functionality to associate mods with specific exclusive maps.
Now, when a player switches to a particular mod, the game will only display maps exclusive to that mod, and other maps will not be shown.
To achieve this, you need to create a multi folder in the root directory of the specific mod and place the maps inside it. If you do not create a multi folder, the game will display all maps by default.
In other words, each mod can have its own multi folder for storing its exclusive maps.


1.3.8.4
1: Fixed a bug where mdg_dodge_vs and rdg_dodge_vs had 100% dodge.
2: Added the functionality for buildings to produce resources. The format is as follows:
def gold_house
class building
cost 10 9 # Cost to build the building
time_cost 70 # Time required to construct the building
hp_max 330 # Maximum health of the building
is_production 1 # 1 indicates the building can produce resources; 0 means it cannot
production_type resource1 # Type of resource the building produces (each building can only produce one resource type)
production_cost 2 0 # Cost of production
production_time 300 # Time required for production
production_qty 100 # Yield received after production is complete
can_start_produce # This field allows the "Start Production" option to appear in the command menu

Once the player clicks on "Start Production," the building will automatically begin production. Progress notifications will be reported each time 20% of the production progress is completed. When production is finished, the resources will automatically be added to the player’s resource pool, and the building will immediately begin the next production cycle. Players can stop production at any time by clicking "Stop."



1.3.8.3

Improved inheritance mechanism, allowing players to achieve very flexible unit inheritance.
For example:
is_a footman; inherits all attributes of the footman.
is_a footman(hp_max mdg); selectively inherits specific attributes of the unit.
is_a footman(apart hp_max); inherits all attributes except for hp_max. I call this "exclusion inheritance."
is_a footman(mdg mdf) knight(hp_max rdf); inherits attributes from multiple units simultaneously.
is_a footman knight archer; inherits everything from multiple units simultaneously.
Some players might not fully understand this feature. Below, I will illustrate the power and importance of this functionality with an example:
def light_armor; Define a light armor unit.  
class soldier  

def heavy_armor  
class soldier  

def light_cavalry  
is_a light_armor  
hp_max 20  
mdf 0.5  
[Additional attributes omitted here.]  

def heavy_cavalry  
is_a heavy_armor  
[Additional attributes omitted here.]  

def spearmen  
class soldier  
mdg 4  
mdg_vs light_armor 18; Has high damage against light armor units.  
Since light_cavalry belongs to light_armor, spearmen have a counter advantage against all units inheriting light_armor.
Players can extend and apply this idea further. This is the simplest use case of the inheritance mechanism!
Fixed Bugs:
Fixed a bug where units sometimes failed to hit targets due to range errors.
Fixed the capture_hp_threshold not being functional.

1.3.8.2 - Ultimate

Added Features:
Capture Ownership Mechanic:
A new feature allows capturing ownership of buildings or units. When the health of a building or unit reaches the capture threshold, it will execute a capture.
A simple example is walls and gates. Their capture threshold is set to 30% health, but players can adjust this value.
Keywords in style.txt: capture_success and target_captured.
New Identifiers for High Ground Mechanics:
Added mdg_projectile and rdg_projectile identifiers:
0 = Disabled, 1 = Enabled. These determine whether units on elevated terrain have additional range.
Added mdg_cover_on_terrain and rdg_cover_on_terrain.
Added mdg_dodge_on_terrain and rdg_dodge_on_terrain.
These allow configuring units' hit rate and dodge rate based on specific terrain.
Deprecated Features:
Removed mdg_blic and rdg_blic.
Improvements:
Enhanced the functionality of vehicles positioned at exits:
For example, walls and gates built at an exit can now interact with either side of the exit, allowing for actions such as loading and unloading units on both sides.
Villagers on either side of the exit can now repair the wall or gate simultaneously.
Additionally, observers located on either side of the exit can see both the container and the units inside it.
Bug Fixes:
Fixed an issue in bindings.txt where hotkeys could not be mapped for resource3 and above.
Fixed the issue where mdg_ready and rdg_ready were not functioning properly (including mdg_ready_vs and rdg_ready_vs).
Fixed the issue where mdg_cd_vs and rdg_cd_vs were not functioning properly.
Fixed the issue where mdg_range_vs, rdg_range_vs, and minimal_range_vs were not working correctly.
Fixed a bug where units inside containers attacking external targets did not trigger hit sound effects.


1.3.8.1 - ultimate

After two months of hard work, I have improved SoundRTS, transforming it into a relatively open and highly flexible engine.
However, due to limited personal energy and the impossibility of covering all aspects on my own, I require the assistance of a large number of players to help with testing.
Additionally, I hope SoundMUD can provide guidance.
This version is far from being the final release, and I will continue to enhance it further—please stay tuned for future updates!
1. Major Improvements to Unit Properties
HP System:
hp_start: Allows you to set the initial HP of a unit.
hp_start_vs: Adjusts hp_start specifically for certain units (needs testing).
hp_max_vs: Adjusts hp_max specifically for certain units (needs testing).
Damage System:
The previous damage field has been replaced with the following damage types:
mdg (melee_damage): Specifies melee damage.
rdg (range_damage): Specifies ranged damage.
mdg_vs: Adjusts melee damage (mdg) specifically against certain units.
rdg_vs: Adjusts ranged damage (rdg) specifically against certain units.
New range-related fields:
mdg_range: Replaces the single range field for melee attacks.
rdg_range: The same functionality for ranged attacks.
mdg_minimal_range: Replaces the single minimal_range field for melee attacks.
rdg_minimal_range: The same functionality for ranged attacks.
mdg_range_vs: Adjusts melee range (mdg_range) specifically for certain units.
rdg_range_vs: Adjusts ranged range (rdg_range) specifically for certain units.
mdg_minimal_range_vs: Adjusts melee minimal range (mdg_minimal_range) specifically for certain units.
rdg_minimal_range_vs: Adjusts ranged minimal range (rdg_minimal_range) specifically for certain units.
New targeting-related fields:
mdg_targets: Replaces the previous target_types for melee attacks.
rdg_targets: Replaces the previous target_types for ranged attacks.
Attack delay and projectile simulation:
mdg_delay: Specifies the delay before a melee attack hits its target. For example, mdg_delay 0.2 means an attack takes 0.2 seconds to hit after being launched (a simulation of projectile travel time).
rdg_delay: The same functionality for ranged attacks.
mdg_blic/rdg_blic: Used to define projectile "arc" behavior (though not real projectiles, it's a simulation using hit delay).
Splash damage:
mdg_splash: Replaces the binary splash field with adjustable values (not just 0 or 1).
rdg_splash: The same functionality for ranged attacks.
mdg_radius: Replaces the single damage_radius field for melee splash damage.
rdg_radius: The same functionality for ranged splash damage.
mdg_splash_decay: Specifies splash damage falloff for melee attacks.
rdg_splash_decay: Specifies splash damage falloff for ranged attacks.
Defense System Improvements:
The previous armor field has been replaced with the following defense types:
mdf (melee_defense): Specifies melee defense.
rdf (range_defense): Specifies ranged defense.
mdf_vs: Adjusts melee defense (mdf) specifically for certain units.
rdf_vs: Adjusts ranged defense (rdf) specifically for certain units.
Attack Cooldowns and Pre-Hit Delays:
mdg_cd: Replaces the single cooldown field for melee attacks.
rdg_cd: The same for ranged attacks.
mdg_cd_vs: Adjusts mdg_cd specifically for certain units.
rdg_cd_vs: Adjusts rdg_cd specifically for certain units.
mdg_ready: Specifies melee attack preparation time.
rdg_ready: Specifies ranged attack preparation time.
mdg_ready_vs: Adjusts mdg_ready specifically for certain units.
rdg_ready_vs: Adjusts rdg_ready specifically for certain units.
Accuracy and Evasion:
mdg_cover: Specifies melee hit rate.
rdg_cover: Specifies ranged hit rate.
mdg_cover_vs: Adjusts mdg_cover specifically for certain units.
rdg_cover_vs: Adjusts rdg_cover specifically for certain units.
mdg_dodge: Specifies melee evasion rate.
rdg_dodge: Specifies ranged evasion rate.
mdg_dodge_vs: Adjusts mdg_dodge specifically for certain units.
rdg_dodge_vs: Adjusts rdg_dodge specifically for certain units.
Movement Speed:
speed: Specifies the base movement speed of a unit.
speed_vs: Adjusts speed specifically for certain units (needs testing).
Attack Sequence System:
For example:
mdg 12  
mdg_cd 1.5  
mdg_range 6  
damage_seq mdg 3 (damage 6 3 3) (interval 0.2)  
This configuration sets up a melee attack sequence that executes three melee attacks of 6, 3, and 3 damage (totaling mdg 12) over intervals of 0.2 seconds each.
2. Unit Behavior in Vehicles:
allow_units_attack: Allows specific units to attack external targets while inside a vehicle. For example:
allow_units_attack archer: Allows archers to attack from vehicles.
allow_units_attack archer footman: Allows multiple units (archer, footman) to attack from vehicles.
allow_units_attack all: Allows all units to attack from vehicles.
By default, units cannot attack from vehicles unless specified.
allow_units_add: Grants vehicles attribute bonuses when loading units.
For example:
allow_units_add speed 0.5: Each loaded unit adds 0.5 movement speed to the vehicle.
Multiple bonuses can be specified, such as:
allow_units_add speed 0.5 mdg 2 mdg_cd 1.5.
3. Upgrades System Enhancements:
Now, upgrades can be defined in a flexible way:
For example:
def melee_weapon_and_defense  
class upgrade  
cost 8 10  
time_cost 60  
effect bonus mdg 1 mdf 2  
Multi-level upgrades are also supported:
def lv1_melee_weapon  
class upgrade  
effect apply_bonus mdg  

def lv2_melee_weapon  
is_a lv1_melee_weapon  

def lv3_melee_weapon  
is_a lv2_melee_weapon  

def footman  
class soldier  
mdg_bonus 1 1 2  # Adds 1 `mdg` for the first two upgrades, and 2 `mdg` for the third.  
4. Skill System Enhancements:
Class definitions for skills now use class skill instead of class ability.
Skills support time_cost and cost parameters. For example:
def a_summon_dragon  
class skill  
requirements u_summon_dragon  
mana_cost 150  
cost 10 15  
time_cost 60  
effect summon 120 2 dragon  
5. Bug Fixes:
Fixed a bug where buildings loaded into transport units lost their meadow attribute.
6. New Gameplay Features:
Players can now enable or disable auto-retaliation mode for any unit during gameplay.
Added new "guard" and "chase" modes in addition to the existing "offensive" and "defensive" modes.
7. Resource System Update:
resource_type is now a string instead of 0 or 1. For example:
resource_type resource1; gold
resource_type resource2; wood
8. Sound System Improvements:
Added casting: Sound effects for skill preparation.
Replaced old fields with more specific ones:
mdg_missed and rdg_missed: Replace missed.
launch_matk and launch_ratk: Replace launch_attack.
matk_hit and ratk_hit: Replace attack_hit.
disappear: Plays when summoned units time out (different from death).